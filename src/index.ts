import { app, BrowserWindow, Menu, Tray, ipcMain } from 'electron';
import { getPublicAssets } from './utils';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line @typescript-eslint/no-require-imports
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createCanvasWindow = (): BrowserWindow => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    frame: false,
    transparent: true,
    // fullscreen: true,
    skipTaskbar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      // contextIsolation: false,
    },
  });

  mainWindow.maximize();

  mainWindow.setIgnoreMouseEvents(true, { forward: true });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // 포커스 이벤트 핸들러
  mainWindow.on('focus', () => {
    mainWindow.webContents.send('window-focus', true); // 포커스 이벤트 전송
  });

  mainWindow.on('blur', () => {
    mainWindow.webContents.send('window-focus', false); // 포커스 잃음 이벤트 전송
  });

  // Open the DevTools.
  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools({
      mode: 'detach',
    });
  }

  ipcMain.on(
    'set-ignore-mouse-events',
    (event, ignore: boolean, options: { forward: boolean }) => {
      mainWindow.setIgnoreMouseEvents(ignore, options);
    }
  );

  return mainWindow;
};

ipcMain.on('canvas', (event, data) => {
  console.log('hi', event, data);
});

const createSettingsWindow = (): BrowserWindow => {
  // Create the browser window.
  const settingsWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: SETTINGS_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  settingsWindow.loadURL(SETTINGS_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (process.env.NODE_ENV === 'development') {
    settingsWindow.webContents.openDevTools();
  }

  return settingsWindow;
};

let tray: Tray | null = null;

app.whenReady().then(() => {
  tray = new Tray(getPublicAssets('icon.png'));

  const contextMenu = Menu.buildFromTemplate([
    {
      label: 'Settings',
      type: 'normal',
      click: () => {
        console.log('Settings clicked');
        createSettingsWindow();
      },
    },
    {
      label: 'Item2',
      type: 'normal',
    },
    {
      label: 'Item3',
      type: 'normal',
    },
    {
      label: 'Quit',
      type: 'normal',
      click: () => {
        app.quit();
      },
    },
  ]);

  tray.setToolTip('This is my application.');
  tray.setContextMenu(contextMenu);
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createCanvasWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createCanvasWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
